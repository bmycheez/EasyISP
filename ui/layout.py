from PySimpleGUI import Text, TabGroup, Tab, Input, Spin, Radio, Button, \
    Checkbox, Column, FileBrowse, FolderBrowse
from configs.default import main, easy, fast, nr3d

easyISP_tab = [
    [Checkbox(key='easy.blc', text='blc (black level)')],
    [Text("black level: "), Input(easy.blc_bl, key='easy.blc_bl',
                                  size=main.constant.text_len)],
    [Checkbox(key='easy.cfa', text='cfa (color filter array)')],
    [Checkbox(key='easy.awb', text='awb (auto white balance)')],
    [Checkbox(key='easy.awb_gw', text='gray world')],
    [Text("r gain: "),  Input(easy.awb_gain.r, key='easy.awb_gain.r',
                              size=main.constant.text_len)],
    [Text("g gain: "),  Input(easy.awb_gain.g, key='easy.awb_gain.g',
                              size=main.constant.text_len)],
    [Text("b gain: "),  Input(easy.awb_gain.b, key='easy.awb_gain.b',
                              size=main.constant.text_len)],
    [Checkbox(key='easy.ccm', text='ccm (color correction matrix)')],
    [Input(easy.ccm_matrix.r2r, key='easy.ccm_matrix.r2r',
           size=main.constant.text_len),
     Input(easy.ccm_matrix.r2g, key='easy.ccm_matrix.r2g',
           size=main.constant.text_len),
     Input(easy.ccm_matrix.r2b, key='easy.ccm_matrix.r2b',
           size=main.constant.text_len)],
    [Input(easy.ccm_matrix.g2r, key='easy.ccm_matrix.g2r',
           size=main.constant.text_len),
     Input(easy.ccm_matrix.g2g, key='easy.ccm_matrix.g2g',
           size=main.constant.text_len),
     Input(easy.ccm_matrix.g2b, key='easy.ccm_matrix.g2b',
           size=main.constant.text_len)],
    [Input(easy.ccm_matrix.b2r, key='easy.ccm_matrix.b2r',
           size=main.constant.text_len),
     Input(easy.ccm_matrix.b2g, key='easy.ccm_matrix.b2g',
           size=main.constant.text_len),
     Input(easy.ccm_matrix.b2b, key='easy.ccm_matrix.b2b',
           size=main.constant.text_len)],
    [Checkbox(key='easy.gac', text='gac (gamma)')],
    [Text("digital gain: "), Input(easy.gac_gain, key='easy.gac_gain',
                                   size=main.constant.text_len)],
    [Text("gamma: "), Input(easy.gac_gamma, key='easy.gac_gamma',
                            size=main.constant.text_len)],
    [Text("")],
    [Button('Run', key='easy.run'), Button('Quit', key='easy.quit')],
]

raw_column = [
    [Checkbox(key='fast.dpc', text='dpc (dead pixel)'),
     Text("th: "), Input(fast.dpc_diff, key='fast.dpc_diff',
                         size=main.constant.text_len)],
    [Checkbox(key='fast.blc', text='blc (black level)'),
     Text("bl: "), Input(fast.blc_bl, key='fast.blc_bl',
                         size=main.constant.text_len)],
    [Checkbox(key='fast.lsc', text='lsc (lens shading)'),
     Text("i: "), Input(fast.lsc_intensity, key='fast.lsc_intensity',
                        size=main.constant.mini_len)],
    [Checkbox(key='fast.aaf', text='aaf (anti-aliasing)')],
    [Checkbox(key='fast.awb', text='awb (auto white balance)'),
     Text("gray world: "), Checkbox(key='fast.awb_gw', text='')],
    [Text("rggb gain: "),
     Input(fast.awb_gain.r, key='fast.awb_gain.r',
           size=main.constant.text_len),
     Input(fast.awb_gain.gr, key='fast.awb_gain.gr',
           size=main.constant.text_len),
     Input(fast.awb_gain.gb, key='fast.awb_gain.gb',
           size=main.constant.text_len),
     Input(fast.awb_gain.b, key='fast.awb_gain.b',
           size=main.constant.text_len)],
    [Checkbox(key='fast.cnf', text='cnf (chroma noise filter)'),
     Text("th: "), Input(fast.cnf_diff, key='fast.cnf_diff',
                         size=main.constant.text_len)],
    [Checkbox(key='fast.cfa', text='cfa (color filter array)'),
     Radio('malvar', "CFA_INTERP", key='fast.cfa_malvar'),
     Radio('bilinear', "CFA_INTERP", key='fast.cfa_bilinear')],
    [Checkbox(key='fast.ccm', text='ccm (color correction matrix, x1024)')],
    [Input(fast.ccm_matrix.r2r, key='fast.ccm_matrix.r2r',
           size=main.constant.text_len),
     Input(fast.ccm_matrix.r2g, key='fast.ccm_matrix.r2g',
           size=main.constant.text_len),
     Input(fast.ccm_matrix.r2b, key='fast.ccm_matrix.r2b',
           size=main.constant.text_len),
     Input(fast.ccm_matrix.r2o, key='fast.ccm_matrix.r2o',
           size=main.constant.text_len)],
    [Input(fast.ccm_matrix.g2r, key='fast.ccm_matrix.g2r',
           size=main.constant.text_len),
     Input(fast.ccm_matrix.g2g, key='fast.ccm_matrix.g2g',
           size=main.constant.text_len),
     Input(fast.ccm_matrix.g2b, key='fast.ccm_matrix.g2b',
           size=main.constant.text_len),
     Input(fast.ccm_matrix.g2o, key='fast.ccm_matrix.g2o',
           size=main.constant.text_len)],
    [Input(fast.ccm_matrix.b2r, key='fast.ccm_matrix.b2r',
           size=main.constant.text_len),
     Input(fast.ccm_matrix.b2g, key='fast.ccm_matrix.b2g',
           size=main.constant.text_len),
     Input(fast.ccm_matrix.b2b, key='fast.ccm_matrix.b2b',
           size=main.constant.text_len),
     Input(fast.ccm_matrix.b2o, key='fast.ccm_matrix.b2o',
           size=main.constant.text_len)],
    [Checkbox(key='fast.gac', text='gac (gamma)'),
     Text("gain/Î³: "),
     Input(fast.gac_gain, key='fast.gac_gain',
     size=main.constant.text_len),
     Input(fast.gac_gamma, key='fast.gac_gamma',
     size=main.constant.text_len)],
    [Checkbox(key='fast.csc', text='csc (color space conversion)')],
]

rgb_column = [
    [Checkbox(key='fast.nlm', text='nlm (non-local means)')],
    [Text("patch/search size: "),
     Input(fast.nlm_patch_size, key='fast.nlm_patch_size',
           size=main.constant.mini_len),
     Input(fast.nlm_search_window_size, key='fast.nlm_search_window_size',
           size=main.constant.mini_len),
     Text("h: "), Input(fast.nlm_h, key='fast.nlm_h',
                        size=main.constant.mini_len)],
    [Checkbox(key='fast.bnf', text='bnf (bilateral noise filter)')],
    [Text("sigma (intensity/spatial): "),
     Input(fast.bnf_intensity_sigma, key='fast.bnf_intensity_sigma',
           size=main.constant.text_len),
     Input(fast.bnf_spatial_sigma, key='fast.bnf_spatial_sigma',
           size=main.constant.text_len)],
    [Checkbox(key='fast.ceh', text='ceh (contrast enhancement)')],
    [Text("size (w, h):"),
     Input(fast.ceh_tile_width, key='fast.ceh_tile_width',
           size=main.constant.mini_len), Text("x"),
     Input(fast.ceh_tile_height, key='fast.ceh_tile_height',
           size=main.constant.mini_len),
     Text("clip limit: "), Input(fast.ceh_clip_limit,
                                 key='fast.ceh_clip_limit',
                                 size=main.constant.text_len)],
    [Checkbox(key='fast.eeh', text='eeh (edge enhancement)')],
    [Text("gain:"), Input(fast.eeh_gain, key='fast.eeh_gain',
                          size=main.constant.text_len),
     Text("th (flat/edge/delta): "),
     Input(fast.eeh_flat_threshold, key='fast.eeh_flat_threshold',
           size=main.constant.mini_len),
     Input(fast.eeh_edge_threshold, key='fast.eeh_edge_threshold',
           size=main.constant.mini_len),
     Input(fast.eeh_delta_threshold, key='fast.eeh_delta_threshold',
           size=main.constant.mini_len)],

    [Checkbox(key='fast.fcs', text='fcs (false color suppression)')],
    [Text("delta (min./max.): "),
     Input(fast.fcs_delta_min, key='fast.fcs_delta_min',
           size=main.constant.mini_len),
     Input(fast.fcs_delta_max, key='fast.fcs_delta_max',
           size=main.constant.mini_len)],
    [Checkbox(key='fast.hsc', text='hsc (hue saturation control)')],
    [Text("gain: "), Input(fast.hsc_gain, key='fast.hsc_gain',
                           size=main.constant.text_len),
     Text("hue offset: "), Input(fast.hsc_offset, key='fast.hsc_offset',
                                 size=main.constant.mini_len)],
    [Checkbox(key='fast.bcc', text='bcc (brightness contrast control)')],
    [Text("gain: "), Input(fast.bcc_gain, key='fast.bcc_gain',
                           size=main.constant.text_len),
     Text("brightness offset: "), Input(fast.bcc_offset, key='fast.bcc_offset',
                                        size=main.constant.mini_len)],
]

fastopenISP_tab = [
    [Text("Raw Domain", justification='center', background_color='green',
          size=main.constant.domain_len),
     Text("RGB Domain", justification='center', background_color='green',
          size=main.constant.domain_len)],
    [Column(raw_column, scrollable=True,
            size=main.constant.scroll_column_size),
     Column(rgb_column, scrollable=True,
            size=main.constant.scroll_column_size)],
    [Button('Run', key='fast.run'), Button('Quit', key='fast.quit')],
]

nr3d_column = [
    [Text("video fps: "), Input(nr3d.fps, key='nr3d.fps',
                                size=main.constant.text_len)],
    [Text("pipeline: ")],
    [Radio("3DNR", "PIPELINE", key='nr3d.nr3d')],
    [Radio("Filter", "PIPELINE", key='nr3d.filter')],
    [Radio("Filter + 3DNR", "PIPELINE", key='nr3d.filter_nr3d')],
    [Radio("3DNR + Filter", "PIPELINE", key='nr3d.nr3d_filter')],
    [Text("number of frames: "), Input(nr3d.num_frames, key='nr3d.num_frames',
                                       size=main.constant.text_len)],
    [Text("motion threshold: "), Input(nr3d.threshold, key='nr3d.threshold',
                                       size=main.constant.text_len)],
]

filter_column = [
    [Checkbox(key='nr3d.eeh', text='luma (Y) eeh (edge enhancement)')],
    [Text("filter size: "), Input(nr3d.eeh_ksize, key='nr3d.eeh_ksize',
                                  size=main.constant.text_len)],
    [Text("edge factor: "), Input(nr3d.eeh_edge_factor,
                                  key='nr3d.eeh_edge_factor',
                                  size=main.constant.text_len)],
    [Text("signal factor: "), Input(nr3d.eeh_signal_factor,
                                    key='nr3d.eeh_signal_factor',
                                    size=main.constant.text_len)],
    [Checkbox(key='nr3d.lpf_luma', text='luma (Y) lpf (low-pass filter)')],
    [Radio("bilateral", "Y_FILTER", key='nr3d.lpf_luma_bnf'),
     Radio("median", "Y_FILTER", key='nr3d.lpf_luma_median')],
    [Text("filter size: "), Input(nr3d.lpf_luma_ksize,
                                  key='nr3d.lpf_luma_ksize',
                                  size=main.constant.text_len)],
    [Text("sigmaColor: "), Input(nr3d.lpf_luma_bnf_sigma.color,
                                 key='nr3d.lpf_luma_bnf_sigma.color',
                                 size=main.constant.text_len)],
    [Text("sigmaSpace: "), Input(nr3d.lpf_luma_bnf_sigma.space,
                                 key='nr3d.lpf_luma_bnf_sigma.space',
                                 size=main.constant.text_len)],
    [Checkbox(key='nr3d.lpf_chroma',
              text='chroma (U, V) lpf (low-pass filter)')],
    [Radio("median", "UV_FILTER", key='nr3d.lpf_chroma_median')],
    [Text("filter size: "), Input(nr3d.lpf_chroma_ksize,
                                  key='nr3d.lpf_chroma_ksize',
                                  size=main.constant.text_len)],
]

NR3D_tab = [
    [Text("3DNR Domain", justification='center', background_color='green',
          size=main.constant.domain_len),
     Text("Filter Domain (CPU only)", justification='center',
          background_color='green', size=main.constant.domain_len)],
    [Column(nr3d_column, scrollable=True,
            size=main.constant.scroll_column_size),
     Column(filter_column, scrollable=True,
            size=main.constant.scroll_column_size)],
    [Button('Run', key='nr3d.run'), Button('Quit', key='nr3d.quit')],
]

crop_tab = [
    [Text("0. ìì¶ë ¥ í´ëë¥¼ ì íë ë°©ë²ì ì´ì ê³¼ ëì¼í©ëë¤.")],
    [Text("")],
    [Text("1. 'Run' ë²í¼ì ëë¦ëë¤.")],
    [Text("")],
    [Text("2. í´ëì ìë ì²«ë²ì§¸ ì´ë¯¸ì§ê° ì´ë¦½ëë¤.")],
    [Text("")],
    [Text("3. ìíë ìì­ì ì¼ìª½ ìì ì ì í´ë¦­í©ëë¤. ì¤ë¥¸ìª½ ìëì ì ìì ëìµëë¤.")],
    [Text("")],
    [Text("4. ì´ë¡ì ë°ì¤ê° ìê°íë©ëë¤.")],
    [Text("")],
    [Text("4-1. í¤ë³´ë 'r' í¤ë¥¼ ëë¥´ë©´ íë¡ê·¸ë¨ì ì²ìë¶í° ë¤ì ììí©ëë¤.")],
    [Text("4-2. í¤ë³´ë 'c' í¤ë¥¼ ëë¥´ë©´ crop í ê²°ê³¼ë¬¼ë§ ë°ë¡ ë³¼ ì ììµëë¤.")],
    [Text("4-3. í¤ë³´ë 'q' í¤ë¥¼ ëë¥´ë©´ ëª¨ë  ì°½ì´ ë«íê³  ì ì¥ë©ëë¤.")],
    [Text("")],
    [Text("")],
    [Text("5. ì¶ë ¥ í´ëë¥¼ íì¸í©ëë¤.")],
    [Text("")],
    [Button('Run', key='crop.run'), Button('Quit', key='crop.quit')],
]

layout = [
    [Text("(1) ìì¶ë ¥ ììì í´ëë¥¼ ì¤ì í´ì£¼ì¸ì.")],
    [Text("load config:   "),
     Input(key='main.config', size=main.constant.file_len),
     FileBrowse(key='main.config_button'),
     Button('Save', key='main.config_save_button'),
     Button('Load', key='main.config_load_button')],
    [Text("input folder:  "),
     Input(key='main.in_path', size=main.constant.folder_len),
     FolderBrowse(key='main.in_path_button')],
    [Text("output folder:"),
     Input(key='main.out_path', size=main.constant.folder_len),
     FolderBrowse(key='main.out_path_button')],

    [Text("")],

    [Text("(2) ìë ¥ ë°ì´í°ì ì¬ìì ì¤ì í´ì£¼ì¸ì.")],
    [Text("device: "),
     Radio('cpu', "DEVICE", key='main.cpu', enable_events=True),
     Radio('cuda', "DEVICE", key='main.cuda', enable_events=True,
           disabled=True)],
    [Text("size (w, h): "),
     Input(main.width, key='main.width', size=main.constant.text_len),
     Text("x"),
     Input(main.height, key='main.height', size=main.constant.text_len)],
    [Text("bit depth: "), Spin(key='main.bit_depth',
                               values=[i for i in range(8, 17)],
                               initial_value=main.bit_depth)],
    [Text("bayer pattern: "),
     Radio('GBRG (IMX462)', "BAYER_PATTERN", key='main.gbrg',
           enable_events=True),
     Radio('BGGR (IMX327)', "BAYER_PATTERN", key='main.bggr',
           enable_events=True),
     Radio('RGGB (Fullhan)', "BAYER_PATTERN", key='main.rggb',
           enable_events=True),
     Radio('GRBG', "BAYER_PATTERN", key='main.grbg',
           enable_events=True),
     Radio('sRGB', "BAYER_PATTERN", key='main.srgb',
           enable_events=True)],

    [Text("")],

    [Text("(3) ISP íëì ììí´ì£¼ì¸ì.")],
    [TabGroup([[Tab('EasyISP', easyISP_tab, key='easy'),
                Tab('fast-openISP', fastopenISP_tab, key='fast'),
                Tab('3DNR+Filter', NR3D_tab, key='nr3d'),
                Tab('ImageCrop', crop_tab, key='crop')]], key='tg')]
]
